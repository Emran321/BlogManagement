@*@model BlogManagement.PostServices.PostServiceViewModel

    @{
        var message = TempData["successMessage"];
        ViewBag.Title = "Blog List";
        Layout = "~/Views/Shared/_Layout.cshtml";
    }

    <section class="content-header">
        <h1>Blog</h1>
    </section>*@







@model BlogManagement.PostServices.PostServiceViewModel

<!-- Add Post Form -->
<div class="card-body">
    <div class="row">
        <div class="col-md-4">
            <form asp-action="AddRecord" method="post">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <div class="form-group">
                    <label asp-for="Title" class="control-label"></label>
                    <input asp-for="Title" class="form-control" required />
                    <span asp-validation-for="Title" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="Content" class="control-label"></label>
                    <input asp-for="Content" class="form-control" required />
                    <span asp-validation-for="Content" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="Author" class="control-label"></label>
                    <input asp-for="Author" class="form-control" required />
                    <span asp-validation-for="Author" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <input type="submit" value="Create" class="btn btn-primary" />
                </div>
            </form>
        </div>
    </div>
</div>
<!-- Post List -->
<table id="postTable">
    <thead>
        <tr>
            <th>Title</th>
            <th>Content</th>
            <th>Author</th>
            <th>Action</th>
        </tr>
    </thead>
    @*<tbody>
            @foreach (var post in Model.)
            {
                <tr data-postId="@post.PostId">
                    <td>@post.Title</td>
                    <td>@post.Content</td>
                    <td>@post.Author</td>
                    <td>
                        <button class="editBtn">Edit</button>
                        <button class="deleteBtn">Delete</button>
                    </td>
                </tr>
            }
        </tbody>*@
</table>

<div id="resultMessage"></div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function () {
            // Add Post
            $('#postForm').submit(function (e) {
                e.preventDefault();
                var formData = $(this).serialize();

                $.ajax({
                    url: '/Blog/Add',
                    type: 'POST',
                    data: formData,
                    success: function (result) {
                        if (result !== -1) {
                            $('#resultMessage').text('Post added successfully! ID: ' + result);
                            // You might want to update the post list here
                        } else {
                            $('#resultMessage').text('Failed to add post.');
                        }
                    },
                    error: function () {
                        $('#resultMessage').text('An error occurred while processing your request.');
                    }
                });
            });

            // Edit Post
            $('#postTable').on('click', '.editBtn', function () {
                var postId = $(this).closest('tr').data('postId');

                // Implement edit functionality using AJAX
                // Make an AJAX call to retrieve post details and populate the form for editing
                // You would need to handle this based on your backend structure
                // For simplicity, I'm providing a basic structure
                $.ajax({
                    url: '/Blog/GetPostById/' + postId, // Replace with your route to get a post by ID
                    type: 'GET',
                    success: function (post) {
                        $('#title').val(post.Title);
                        $('#content').val(post.Content);
                        $('#author').val(post.Author);

                        // You might need to handle updating the post here after editing
                    },
                    error: function () {
                        $('#resultMessage').text('An error occurred while fetching post details for editing.');
                    }
                });
            });

            // Delete Post
            $('#postTable').on('click', '.deleteBtn', function () {
                var postId = $(this).closest('tr').data('postId');

                // Implement delete functionality using AJAX
                $.ajax({
                    url: '/Blog/Delete/' + postId, // Replace with your route to delete a post
                    type: 'DELETE',
                    success: function () {
                        // You might want to update the post list here after deletion
                        // Remove the deleted post row from the table
                        $('tr[data-postId="' + postId + '"]').remove();
                        $('#resultMessage').text('Post deleted successfully.');
                    },
                    error: function () {
                        $('#resultMessage').text('An error occurred while deleting the post.');
                    }
                });
            });
        });
    </script>
}




















@*@model BlogManagement.Models.Posts


    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <h4>Posts</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Content, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Content, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Content, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Author, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Author, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Author, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <label for="message-text" class="col-form-label">Receive Date:</label>
                <input name="DateCreated" asp-for="DateCreated" type="datetime" value="@DateTime.Now.ToString("dd/MM/yyyy")" required="required" class="datepicker form-control " placeholder="MRR Date" autocomplete="off">
                @Html.ValidationMessageFor(model => model.DateCreated, "", new { @class = "text-danger" })
            </div>
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="btn btn-default" />
                </div>
            </div>
        </div>
    }

    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>

    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
    }*@
